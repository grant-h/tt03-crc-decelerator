--- 
# TinyTapeout project information
project:
  wokwi_id:    0        # If using wokwi, set this to your project's ID

# If using an HDL, set wokwi_id as 0 and uncomment and list your source files here. 
# Source files must be in ./src and you must list each source file separately
  source_files:        
    - granth_crc_decelerator.v
    - crcN.v
    - lfsrN.v
    - reflect8.v
    - reflect8N.v
    - reflect1N.v

  top_module:  "granth_crc_decelerator"      # put the name of your top module here, make it unique by prepending your github username

# Keep a track of the submission yaml
yaml_version: 3.0

# As everyone will have access to all designs, try to make it easy for someone new to your design to know what
# it does and how to operate it. This info will be automatically collected and used to make a datasheet for the chip.
#
# Here is a great example: https://github.com/davidsiaw/tt02-davidsiaw-stackcalc/blob/38c5647f83aad2aec675d566aa3d67b98f0aac81/info.yaml
documentation: 
  author:       "Grant Hernandez (@grant-h)"
  title:        "CRC Decelerator"
  language:     "Verilog"
  description:  "A reconfigurable CRC engine"

# Longer description of how the project works. You can use standard markdown format.
  how_it_works: |
      The CRC decelerator is a reconfigurable CRC block that can be programmed to
      calculate different CRC values up to 64-bits with arbitrary length
      streamed input data. Since clock speeds are low, its unlikely that this CRC
      engine will be faster than the CPU streaming in data, hence "decelerator".

      To begin, a `SETUP` bitstream containing the
      bitwidth, reflect in/out, CRC poly, init, and XOR out is sent.  Then the
      `MESSAGE` is streamed in 4-bits at a time until the message is complete.
      Finally, the `FINAL` is signaled, leading the final CRC value to be streamed out.
      To calculate another CRC fresh, send `RESET`.

# Instructions on how someone could test your project, include things like what buttons do what and how to set the clock if needed
  how_to_test:  |
      Reset the chip, send `SETUP` bitstream corresponding to your desired CRC
      configuration, stream in your `MESSAGE`, and finally signal `FINAL` to
      stream out your calculated. Use a golden CRC model to compare the output.

# A description of what the inputs do
  inputs:               
    - `clk`
    - `rst`
    - `cmd[0]`
    - `cmd[1]`
    - `data_in[0]`
    - `data_in[1]`
    - `data_in[2]`
    - `data_in[3]`
# A description of what the outputs do
  outputs:
    - `data_out[0]`
    - `data_out[1]`
    - `data_out[2]`
    - `data_out[3]`
    - `data_out[4]`
    - `data_out[5]`
    - `data_out[6]`
    - `data_out[7]`

# The following fields are optional
  tag:          "crc, cyclic redundancy check"      # comma separated list of tags: test encryption, experiment, clock, animation, utility, industrial, pwm, fpga, alu, microprocessor, risc, riscv, sensor, signal generator, fft, filter, music, bcd, sound, serial, timer, random number generator, calculator, decoder, counter, puzzle, multiplier, game, oscillator,
  external_hw:  ""      # Describe any external hardware needed
  discord:      "digitalcold#1984"      # Your discord handle, used for communication and automatically assigning tapeout role after a submission
  doc_link:     ""      # URL to longer form documentation, eg the README.md in your repository
  clock_hz:     1000       # Clock frequency in Hz (if required)
  picture:      ""      # relative path to a picture in your repository
